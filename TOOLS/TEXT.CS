using System.Text.Json;
using System.IO;

namespace TOOLS
{
    public static class TextTools
    {
        // This function has been generated by the free online Chat-Bot ChatGPT-4o
        public static string WrapText(string text, int bounds)
        {
            if (bounds < 1) return text;

            string[] words = text.Split(' ');
            string wrappedText = string.Empty;
            string currentLine = string.Empty;

            for (int i = 0; i < words.Length; i++)
            {
                string word = words[i];

                // Check if adding the next word would exceed the bounds
                if (currentLine.Length + word.Length + 1 <= bounds)
                {
                    // If the current line is empty, just add the word
                    if (string.IsNullOrEmpty(currentLine))
                        currentLine = word;
                    else
                        currentLine += " " + word;
                }
                else
                {
                    // If the current word itself is too long, split it
                    if (word.Length > bounds)
                    {
                        if (!string.IsNullOrEmpty(currentLine))
                        {
                            wrappedText += currentLine + Environment.NewLine;
                            currentLine = string.Empty;
                        }
                        while (word.Length > bounds)
                        {
                            wrappedText += word.Substring(0, bounds) + Environment.NewLine;
                            word = word.Substring(bounds);
                        }
                        currentLine = word;
                    }
                    else
                    {
                        // Add the current line to the wrapped text and start a new line
                        if (!string.IsNullOrEmpty(currentLine))
                            wrappedText += currentLine + Environment.NewLine;
                        currentLine = word;
                    }
                }
            }

            // Add the last line
            if (!string.IsNullOrEmpty(currentLine))
                wrappedText += currentLine;

            return wrappedText;
        }

        public static string OverlayString(string template, string overlay)
        {
            // Convert template to a character array to modify it.
            char[] result = template.ToCharArray();

            int overlayIndex = 0; // Keep track of the overlay string's position.

            for (int i = 0; i < result.Length; i++)
            {
                // Replace '#' with the overlay character if available, otherwise use a space.
                if (result[i] == '#')
                {
                    if (overlayIndex < overlay.Length)
                    {
                        result[i] = overlay[overlayIndex];
                        overlayIndex++;
                    }
                    else
                    {
                        result[i] = ' '; // Replace remaining '#' with space.
                    }
                }
            }

            return new string(result);
        }

        //
    }
}
