//
// This file has been generated by the free and online chatbot ChatGPT-4o
// The file has been modified by @immortal640
//

using PInvoke;
using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace TOOLS
{
    // COORD structure
    [StructLayout(LayoutKind.Sequential)]
    public struct COORD
    {
        public short X;
        public short Y;
    }

    // Console screen buffer info
    [StructLayout(LayoutKind.Sequential)]
    public struct CONSOLE_SCREEN_BUFFER_INFO
    {
        public COORD dwSize;
        public COORD dwCursorPosition;
        public short wAttributes;
        public COORD srWindowSize;
        public COORD dwMaximumWindowSize;
    }

    public static class MouseClickHandler
    {
        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern IntPtr GetStdHandle(int nStdHandle);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool GetConsoleMode(IntPtr hConsoleHandle, out uint lpMode);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool SetConsoleMode(IntPtr hConsoleHandle, uint dwMode);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool ReadConsoleInput(IntPtr hConsoleInput, [Out] INPUT_RECORD[] lpBuffer, uint nLength, out uint lpNumberOfEventsRead);

        private const int STD_INPUT_HANDLE = -10;
        private const uint ENABLE_MOUSE_INPUT = 0x0010;
        private const uint ENABLE_EXTENDED_FLAGS = 0x0080;
        private const ushort MOUSE_EVENT = 0x0002;
        private const uint LEFTMOST_BUTTON_PRESSED = 0x0001;
        private const uint RIGHTMOST_BUTTON_PRESSED = 0x0002;

        [StructLayout(LayoutKind.Explicit)]
        private struct INPUT_RECORD
        {
            [FieldOffset(0)]
            public ushort EventType;
            [FieldOffset(4)]
            public MOUSE_EVENT_RECORD MouseEvent;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MOUSE_EVENT_RECORD
        {
            public COORD dwMousePosition;
            public uint dwButtonState;
            public uint dwControlKeyState;
            public uint dwEventFlags;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct COORD
        {
            public short X;
            public short Y;
        }

        public static bool SCL { get; private set; } = false;
        public static bool SCR { get; private set; } = false;
        public static bool SRL { get; private set; } = false;
        public static bool SRR { get; private set; } = false;

        public static void StartMouseInputThread()
        {
            Thread mouseInputThread = new Thread(MouseInputLoop);
            mouseInputThread.IsBackground = true; // Ensure the thread does not prevent the application from exiting
            mouseInputThread.Start();
        }

        private static void MouseInputLoop()
        {
            IntPtr consoleHandle = GetStdHandle(STD_INPUT_HANDLE);

            if (consoleHandle == IntPtr.Zero)
            {
                return;
            }

            if (!GetConsoleMode(consoleHandle, out uint consoleMode))
            {
                return;
            }

            consoleMode |= ENABLE_MOUSE_INPUT | ENABLE_EXTENDED_FLAGS;
            if (!SetConsoleMode(consoleHandle, consoleMode))
            {
                return;
            }

            while (true)
            {
                INPUT_RECORD[] records = new INPUT_RECORD[1];
                if (ReadConsoleInput(consoleHandle, records, 1, out uint eventsRead) && eventsRead > 0)
                {
                    foreach (var record in records)
                    {
                        if (record.EventType == MOUSE_EVENT)
                        {
                            HandleMouseEvent(record.MouseEvent);
                        }
                    }
                }
            }
        }

        private static void HandleMouseEvent(MOUSE_EVENT_RECORD mouseEvent)
        {
            SRL = false;
            SRR = false;
            // Update the state for the left mouse button
            if ((mouseEvent.dwButtonState & LEFTMOST_BUTTON_PRESSED) != 0)
            {
                SCL = true;
            }
            else if (SCL && (mouseEvent.dwButtonState & LEFTMOST_BUTTON_PRESSED) == 0)
            {
                SCL = false;
                SRL = true;
            }

            // Update the state for the right mouse button
            if ((mouseEvent.dwButtonState & RIGHTMOST_BUTTON_PRESSED) != 0)
            {
                SCR = true;
            }
            else if (SCR && (mouseEvent.dwButtonState & RIGHTMOST_BUTTON_PRESSED) == 0)
            {
                SCR = false;
                SRR = true;
            }
        }

        public static bool GetSCL()
        {
            return SCL;
        }

        public static bool GetSCR()
        {
            return SCR;
        }

        public static bool GetSRL()
        {
            return SRL;
        }

        public static bool GetSRR()
        {
            return SRR;
        }
    }
}
